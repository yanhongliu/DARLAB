===============================================================================
                                    JITPL5
===============================================================================



At first, all the code is normally interpreted.


Tracing phase
=============

Tracing: executing code and recording what we did, for one loop.  This
starts at the app-level JUMP_ABSOLUTE (or equivalent) bytecode that
closes an app-level loop.  Implemented by interpreting a custom
bytecode that describes the interpreter itself.  (Could later be
optimized by removing the rainbow bytecode.)

We pass around BoxInt and BoxPtr objects that have this minimal
content::

   +- BoxInt ---------+
   |    real value    |
   +------------------+

In other words, BoxInt and BoxPtr just record the real value.  Like
PyPy's flowgraph, each operation generates a new BoxInt or BoxPtr
(even if it contains the same real value as another box).

Tracing goes on for exactly one iteration of the app-level loop.  As it
handles real values, it makes the real program progress one iteration.


Perfect specialization
======================

Goal: inspect the trace and choose how specialized it should be.  The
algorithm is as follows:

1. Compute a subset of the boxes that gives all values that are
   important to know at the start of the loop.

2. Compute a subset of the boxes that gives all values that are
   statically known at the end of the loop.

3. Do the intersection between (1) and (2).

In more details: we first compute (2), by following the trace and
looking for the operations ``setfield(x, y, z)`` to build a graph of
pointers between boxes.  We also record which BoxPtr's values escape,
and we don't record anything about the mutable fields of an escaped
pointer.  (Note that this whole step could already be done when
tracing.)

To compute (1), we must follow once more the trace.  A BoxInt or BoxPtr
that is "important" to know can be found by looking for guards on it;
conceptually, we put a star on such boxes.  We also record the fields
present at the start of the loop: when we see a ``z = getfield(x, y)``,
if we are sure that the value we get was not modified since the start of
the loop, then the field 'y' of the box 'x' is the box 'z'.  This gives
a tree.  At the end, we drop the parts of the tree that don't lead to
stars.  (This must be done after (2), because it needs the information
"not modified since the start of the loop", which depends on prior
escaping.)

Finally, to compute (3), we drop the parts of the tree (1) that don't
have a matching part in the graph (2).  The remaining tree tells us
exactly how specialized the loop needs to be.


Recording the loop
==================

The loop can be directly executed after it is compiled; but later, we
also need a way to re-enter the already-compiled loop.  In the
JUMP_ABSOLUTE bytecode of the regular interpreter, we need to check if
we already saw that loop; and if we did, if the specialization pattern
matches the real data -- but this is delicate because of the
non-escaping flag.

Instead, this is done by "entry bridges": we do tracing from
the start of the loop again, and at the end, we try to compile
the recorded trace as a "bridge" that comes from the
interpreter (i.e. with no virtuals at all) and goes to the old
loop.  Later on, we can just jump directly to the entry bridge
from the JUMP_ABSOLUTE bytecode.


Guard failure
=============

When a guard fails, we normally fall back to regular interpretation.
Because the guard failure occurs in the middle of executing an
app-level bytecode, this requires interpreting the bytecode describing
the interpreter with a fall-back interpreter (which is actually
implemented with the same code as the tracer) until the start of the
next app-level bytecode.

When we decide instead to compile more code for this guard failure, we
take the set of live values and put them back into boxes, and proceed
with tracing for the rest of the loop.

At the end of the loop, we check that it matches an already-computed
specialization.  If not, we go on tracing.  This might unroll the loop
once.  (Note that there is a global limit on the length of the recorded
trace, to avoid tracing forever.)
