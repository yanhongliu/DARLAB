.text
.globl _main_py
_main_py:
.asciz "import sys\nimport code\nprint \"Run\"\n\ndef tree_repr(tree, indent):\n\tglobal tree_repr\n\tprint (\" \" * indent) + repr(tree)\n\tif indent < 20:\n\t\tfor name,attribute in tree.getattributes().iteritems():\n\t\t\tif isinstance(attribute, gcc.Tree):\n\t\t\t\tprint (\" \" * (indent + 2)) + repr(name)\n\t\t\t\ttree_repr(attribute, indent + 4)\n\t\t\telse:\n\t\t\t\tprint (\" \" * (indent + 2)) + repr(name) + \"=\" + repr(attribute)\n\t\tfor operand in tree.getoperands():\n\t\t\ttree_repr(operand, indent + 2)\n\nfor block in gcc.getblocks():\n\tprint repr(block)\n\tfor statement in block.getstatements():\n\t\ttree_repr(statement.gettree(), 2)\n\ndef console_handler(string,local_stack={}): #local_stack is thus, in effect, static\n\tif (string) == \"exit\":\n\t\treturn False\n\telse:\n\t\ttry:\n\t\t\texec string in globals(),local_stack\n\t\texcept Exception,inst:\n\t\t\tprint \"Exception Encountered: %s\"%str(inst)\n\treturn True\n\n#while(console_handler(raw_input(\"> \"))):\n#\tpass \n\ncode.interact(\"Welcome to InvTS/GCC!\",raw_input,globals())\n#res = InvTS.do_rules(*res)\n"
